[{"/Users/Shahzad/Documents/Snippet/snippet-library/src/index.js":"1","/Users/Shahzad/Documents/Snippet/snippet-library/src/reportWebVitals.js":"2","/Users/Shahzad/Documents/Snippet/snippet-library/src/App.js":"3","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Content.jsx":"4","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Single.jsx":"5","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Home.jsx":"6","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Navbar.jsx":"7","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Sidebar.jsx":"8","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Add-snippet.jsx":"9","/Users/Shahzad/Documents/Snippet/snippet-library/src/api/api.js":"10"},{"size":834,"mtime":1686952677489,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1686818607809,"results":"13","hashOfConfig":"12"},{"size":616,"mtime":1687127658335,"results":"14","hashOfConfig":"12"},{"size":1433,"mtime":1687269188001,"results":"15","hashOfConfig":"12"},{"size":3147,"mtime":1687268618432,"results":"16","hashOfConfig":"12"},{"size":2408,"mtime":1687269832610,"results":"17","hashOfConfig":"12"},{"size":837,"mtime":1686918169757,"results":"18","hashOfConfig":"12"},{"size":2174,"mtime":1687257114283,"results":"19","hashOfConfig":"12"},{"size":6394,"mtime":1687346655756,"results":"20","hashOfConfig":"12"},{"size":706,"mtime":1687262277673,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"grp16c",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Shahzad/Documents/Snippet/snippet-library/src/index.js",[],[],[],"/Users/Shahzad/Documents/Snippet/snippet-library/src/reportWebVitals.js",[],[],"/Users/Shahzad/Documents/Snippet/snippet-library/src/App.js",[],[],"/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Content.jsx",["57","58"],[],"import { Link } from \"react-router-dom\";\nimport Snippets from \"../Components/json/Snippets.json\";\nimport { dataContext } from \"./Home\";\nimport { useContext } from \"react\";\n\nconst Content = () => {\n  const [data, setData] = useContext(dataContext);\n\n  return (\n    <section className=\"section-products\">\n      <div className=\"container\" id=\"container\">\n        <div className=\"row\">\n          {/* Single product */}\n          {Array.isArray(data)\n            ? data.map((snippet) => (\n                <div className=\"col-md-6 col-lg-4 col-xl-3\" key={snippet.id}>\n                  <Link to={`/snippet/${snippet.id}`}>\n                    <div id=\"product-1\" className=\"single-product\">\n                      <div className=\"part-1\">\n                        <img src={snippet.image} alt=\"snippet\"></img>\n                        <span className=\"new\">HTML</span>\n                      </div>\n                      <div className=\"part-2\">\n                        <h3 className=\"product-title\">{snippet.title}</h3>\n                        <p className=\"product-desc\">\n                          {snippet.description.substring(0, 50)}\n                        </p>\n                      </div>\n                    </div>\n                  </Link>\n                </div>\n              ))\n            : console.log(\"is not array\")}\n\n          {/* Single product */}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Content;\n","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Single.jsx",["59","60","61","62"],[],"//import image from \"../code.jpg\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Snippets from \"../Components/json/Snippets.json\";\nimport { useState } from \"react\";\n\nconst Single = () => {\n  const { id } = useParams();\n  const curr_snippet = Snippets.find((snippet) => snippet.id == id);\n  const { title, description, image, codes } = curr_snippet;\n  const [copy, setCopy] = useState(\"false\");\n\n  //const handleCopy = (id) => {\n  //  console.log(copy);\n  //  const curr_code = codes.find((code) => code.id == id);\n  //  navigator.clipboard.writeText(curr_code.code);\n  // setCopy(true);\n  //  setTimeout(() => {\n  //    setCopy(false);\n  //  }, 100);\n  // };\n\n  const handleCopy = (id) => {\n    setCopy((prevCopy) => {\n      const updatedCopy = { ...prevCopy }; // Create a shallow copy of the copy state\n      updatedCopy[id] = true; // Set the copy state for the specified code snippet to true\n      return updatedCopy;\n    });\n\n    const curr_code = codes.find((code) => code.id == id);\n    navigator.clipboard.writeText(curr_code.code);\n\n    setTimeout(() => {\n      setCopy((prevCopy) => {\n        const updatedCopy = { ...prevCopy }; // Create a shallow copy of the copy state\n        updatedCopy[id] = false; // Set the copy state for the specified code snippet back to false\n        return updatedCopy;\n      });\n    }, 100);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-lg-12\">\n          <div className=\"snippet-card\">\n            <Link to=\"/\">Back</Link>\n            <div className=\"snippet-picture\">\n              <img src={image} alt=\"picture\" />\n            </div>\n            <h1 className=\"snippet-title\">{title}</h1>\n            <p className=\"snippet-description\">{description}</p>\n\n            {codes.map((code) => (\n              <div className=\"snippetCode\" key={code.id}>\n                <div className=\"code-heeader d-flex justify-content-between items-center\">\n                  <p className=\"text-sm\">{code.language}</p>\n                  {copy[code.id] ? (\n                    <button\n                      className=\"inline-flex items-center gap-1\"\n                      onClick={() => handleCopy(code.id)}\n                    >\n                      <span className=\"fa-regular fa-clipboard\"></span>\n                      copy code\n                    </button>\n                  ) : (\n                    <button className=\"inline-flex items-center gap-1\">\n                      <span className=\"fa-solid fa-check\"></span>\n                      copied\n                    </button>\n                  )}\n                </div>\n                <SyntaxHighlighter\n                  language={code.language}\n                  customStyle={{ padding: \"25px\" }}\n                  wrapLongLines={true}\n                >\n                  {code.code}\n                </SyntaxHighlighter>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Single;\n","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Home.jsx",[],[],"/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Navbar.jsx",[],[],"/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Sidebar.jsx",["63"],[],"import { Link } from \"react-router-dom\";\n\nconst Sidebar = () => {\n  return (\n    <nav id=\"sidebar\">\n      <h1>\n        <a href=\"index.html\" className=\"logo\" id=\"logo\">\n          Snippet.\n        </a>\n      </h1>\n      <ul className=\"list-unstyled components mb-5\">\n        <li className=\"active\">\n          <div className=\"list-heading\">\n            <Link to=\"/add\" className=\"btn-addSnippet\">\n              <span className=\"fa fa-plus\"></span>\n              Add Snippet\n            </Link>\n          </div>\n        </li>\n        <li className=\"active\">\n          <div className=\"list-heading\">\n            <a href=\"#\">\n              <span className=\"fa fa-home\"></span>\n              Categories\n            </a>\n          </div>\n\n          <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              defaultValue\n              id=\"flexCheckDefault\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\n              HTML\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              defaultValue\n              id=\"flexCheckDefault\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\n              SCSS\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              defaultValue\n              id=\"flexCheckDefault\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\n              JAVASCRIPT\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              defaultValue\n              id=\"flexCheckDefault\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\n              PHP\n            </label>\n          </div>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Sidebar;\n","/Users/Shahzad/Documents/Snippet/snippet-library/src/Components/Add-snippet.jsx",["64","65","66","67","68","69","70","71"],[],"import { Link } from \"react-router-dom\";\nimport { saveData } from \"../api/api\";\nimport { useEffect, useState, useRef } from \"react\";\n\nconst AddSnippet = ({ onChangeContent }) => {\n  function handleAdd() {\n    const selection = document.getElementById(\"snippet-language\");\n    let selection_value = selection.value;\n    const div_snippet = document.getElementById(\"container-snippet\");\n    let snippet = \"\";\n    snippet = snippet.concat(\n      \"<div class='textarea-snippet'><small class='snippetTag'>\",\n      selection_value,\n      \"</small><textarea class='form-control text_area' id='text_area' snippet='\",\n      selection_value,\n      \"' placeholder='Add snippet here' name='code' ></textarea></div>\"\n    );\n    selection_value !== \"\"\n      ? div_snippet.insertAdjacentHTML(\"beforeend\", snippet)\n      : document.getElementById(\"snippet-language\").focus();\n    selection_value = \"\";\n  }\n\n  const [formData, setFormData] = useState({});\n  const [codesnippet, setsnippet] = useState([]);\n  const inputRef = useRef(null);\n\n  const handleChange = (e) => {\n    console.log(\"hello\");\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n    console.log(formData);\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const text_area = document.getElementsByClassName(\".text_area\");\n    const text_area_value = text_area.value;\n    console.log(text_area_value);\n  };\n\n  function handlesSubmit(event) {\n    const selection = document.getElementById(\"snippet-language\");\n    console.log(\"hello, world\");\n\n    const data = [\n      {\n        id: 1,\n        image: \"/Images/code.jpg\",\n        title: \"Snippet ADD\",\n        description: \"Lorem \",\n        category: \"ADD\",\n        codes: [\n          {\n            id: 55,\n            language: \"55\",\n            code: \"code 55\",\n          },\n          {\n            id: 55,\n            language: \"55\",\n            code: \"code 55\",\n          },\n          {\n            id: 55,\n            language: \"55\",\n            code: \"code 55\",\n          },\n          {\n            id: 55,\n            language: \"55\",\n            code: \"code 55\",\n          },\n        ],\n      },\n    ];\n  }\n\n  useEffect(() => {\n    const save_button = document.getElementsByClassName(\"save\");\n    window.addEventListener(\"click\", console.log(\"hello\"));\n  });\n\n  return (\n    <>\n      <div className=\"container container-add\">\n        <div className=\"row d-flex justify-content-center\">\n          <Link to=\"/\" className=\"btn-back\">\n            Back to home\n          </Link>\n          <form on onSubmit={handleSubmit}>\n            <div className=\"row mb-3\">\n              <label htmlFor=\"inputEmail3\" className=\"col-sm-2 col-form-label\">\n                Language\n              </label>\n              <div className=\"col-sm-10 padding-none\">\n                <select\n                  className=\"form-select form-select-lg mb-3\"\n                  aria-label=\".form-select-lg example\"\n                  name=\"category\"\n                  onChange={handleChange}\n                >\n                  <option defaultValue=\"\">Select language</option>\n                  <option value=\"html\">Html</option>\n                  <option value=\"scss\">Scss</option>\n                  <option value=\"js\">JavaScript</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"row mb-3\">\n              <label htmlFor=\"input-title\" className=\"col-sm-2 col-form-label\">\n                Title\n              </label>\n              <div className=\"col-sm-10 padding-none\">\n                <input\n                  type=\"title\"\n                  name=\"title\"\n                  className=\"form-control\"\n                  id=\"input-title\"\n                  onChange={handleChange}\n                />\n              </div>\n            </div>\n            <div className=\"row mb-3\">\n              <label htmlFor=\"input-desc\" className=\"col-sm-2 col-form-label\">\n                Description\n              </label>\n              <div className=\"col-sm-10 padding-none\">\n                <input\n                  type=\"desc\"\n                  className=\"form-control\"\n                  id=\"input-desc\"\n                  name=\"description\"\n                  onChange={handleChange}\n                />\n              </div>\n            </div>\n\n            <div className=\"row mb-3\">\n              <label htmlFor=\"input-code\" className=\"col-sm-2 col-form-label\">\n                Add Snippet\n              </label>\n              <div className=\"col-sm-10\">\n                <div className=\"row container-snippet\" id=\"container-snippet\">\n                  <div className=\"select-lang col-md-4\">\n                    <select\n                      className=\"form-select form-select-md mb-3 col-md-5\"\n                      id=\"snippet-language\"\n                      aria-label=\".form-select-lg example\"\n                    >\n                      <option defaultValue=\"null\" placeholder=\"Select Language\">\n                        {\" \"}\n                      </option>\n                      <option value=\"html\">Html</option>\n                      <option value=\"scss\">Scss</option>\n                      <option value=\"js\">JavaScript</option>\n                    </select>\n                  </div>\n                  <div className=\"btn-add col-md-2\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary\"\n                      onClick={handleAdd}\n                    >\n                      Add\n                    </button>\n                  </div>\n\n                  <div class=\"textarea-snippet\">\n                    <small class=\"snippetTag\">html</small>\n                    <textarea\n                      class=\"form-control text_area\"\n                      id=\"text_area\"\n                      snippet=\"html\"\n                      placeholder=\"Add snippet here\"\n                      name=\"code\"\n                      onChange={(e) => handleChange(e)}\n                    ></textarea>\n                    <button className=\"save\">Save</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary float-end btn-post\"\n            >\n              Post\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AddSnippet;\n","/Users/Shahzad/Documents/Snippet/snippet-library/src/api/api.js",[],[],{"ruleId":"72","severity":1,"message":"73","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":7,"column":16,"nodeType":"74","messageId":"75","endLine":7,"endColumn":23},{"ruleId":"72","severity":1,"message":"77","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":14},{"ruleId":"78","severity":1,"message":"79","line":10,"column":62,"nodeType":"80","messageId":"81","endLine":10,"endColumn":64},{"ruleId":"78","severity":1,"message":"79","line":31,"column":52,"nodeType":"80","messageId":"81","endLine":31,"endColumn":54},{"ruleId":"82","severity":1,"message":"83","line":50,"column":15,"nodeType":"84","endLine":50,"endColumn":48},{"ruleId":"85","severity":1,"message":"86","line":22,"column":13,"nodeType":"84","endLine":22,"endColumn":25},{"ruleId":"72","severity":1,"message":"87","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":18},{"ruleId":"72","severity":1,"message":"88","line":25,"column":10,"nodeType":"74","messageId":"75","endLine":25,"endColumn":21},{"ruleId":"72","severity":1,"message":"89","line":25,"column":23,"nodeType":"74","messageId":"75","endLine":25,"endColumn":33},{"ruleId":"72","severity":1,"message":"90","line":26,"column":9,"nodeType":"74","messageId":"75","endLine":26,"endColumn":17},{"ruleId":"72","severity":1,"message":"91","line":40,"column":12,"nodeType":"74","messageId":"75","endLine":40,"endColumn":25},{"ruleId":"72","severity":1,"message":"92","line":41,"column":11,"nodeType":"74","messageId":"75","endLine":41,"endColumn":20},{"ruleId":"72","severity":1,"message":"93","line":44,"column":11,"nodeType":"74","messageId":"75","endLine":44,"endColumn":15},{"ruleId":"72","severity":1,"message":"94","line":78,"column":11,"nodeType":"74","messageId":"75","endLine":78,"endColumn":22},"no-unused-vars","'Snippets' is defined but never used.","Identifier","unusedVar","'setData' is assigned a value but never used.","'dark' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'saveData' is defined but never used.","'codesnippet' is assigned a value but never used.","'setsnippet' is assigned a value but never used.","'inputRef' is assigned a value but never used.","'handlesSubmit' is defined but never used.","'selection' is assigned a value but never used.","'data' is assigned a value but never used.","'save_button' is assigned a value but never used."]